using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace eSyaFeedback.DL.Entities
{
    public partial class eSyaEnterprise : DbContext
    {
        public eSyaEnterprise()
        {
        }

        public eSyaEnterprise(DbContextOptions<eSyaEnterprise> options)
            : base(options)
        {
        }

        public virtual DbSet<GtEcapcd> GtEcapcd { get; set; }
        public virtual DbSet<GtEcapct> GtEcapct { get; set; }
        public virtual DbSet<GtEcclco> GtEcclco { get; set; }
        public virtual DbSet<GtEcdcbn> GtEcdcbn { get; set; }
        public virtual DbSet<GtEcdcsn> GtEcdcsn { get; set; }
        public virtual DbSet<GtFbptcm> GtFbptcm { get; set; }
        public virtual DbSet<GtFbptdt> GtFbptdt { get; set; }
        public virtual DbSet<GtFbptqe> GtFbptqe { get; set; }
        public virtual DbSet<GtFbqegr> GtFbqegr { get; set; }
        public virtual DbSet<GtFbqems> GtFbqems { get; set; }
        public virtual DbSet<GtFbqetg> GtFbqetg { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Server=103.227.97.123,1433;Database=eSyaEnterprise_Prod;user id=esya;password=Gt@pl#20;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity<GtEcapcd>(entity =>
            {
                entity.HasKey(e => e.ApplicationCode)
                    .HasName("PK_GT_ECAPCD_1");

                entity.ToTable("GT_ECAPCD");

                entity.Property(e => e.ApplicationCode).ValueGeneratedNever();

                entity.Property(e => e.CodeDesc)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FormId)
                    .IsRequired()
                    .HasColumnName("FormID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedTerminal).HasMaxLength(50);

                entity.Property(e => e.ShortCode).HasMaxLength(15);

                entity.HasOne(d => d.CodeTypeNavigation)
                    .WithMany(p => p.GtEcapcd)
                    .HasForeignKey(d => d.CodeType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GT_ECAPCD_GT_ECAPCT");
            });

            modelBuilder.Entity<GtEcapct>(entity =>
            {
                entity.HasKey(e => e.CodeType);

                entity.ToTable("GT_ECAPCT");

                entity.Property(e => e.CodeType).ValueGeneratedNever();

                entity.Property(e => e.CodeTyepDesc)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CodeTypeControl)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FormId)
                    .IsRequired()
                    .HasColumnName("FormID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedTerminal).HasMaxLength(50);
            });

            modelBuilder.Entity<GtEcclco>(entity =>
            {
                entity.HasKey(e => new { e.BusinessKey, e.FinancialYear });

                entity.ToTable("GT_ECCLCO");

                entity.Property(e => e.FinancialYear).HasColumnType("numeric(4, 0)");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FormId)
                    .IsRequired()
                    .HasColumnName("FormID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedTerminal).HasMaxLength(50);

                entity.Property(e => e.TillDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<GtEcdcbn>(entity =>
            {
                entity.HasKey(e => new { e.BusinessKey, e.FinancialYear, e.DocumentId });

                entity.ToTable("GT_ECDCBN");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedTerminal).HasMaxLength(50);
            });

            modelBuilder.Entity<GtEcdcsn>(entity =>
            {
                entity.HasKey(e => new { e.BusinessKey, e.DocumentId });

                entity.ToTable("GT_ECDCSN");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedTerminal).HasMaxLength(50);
            });

            modelBuilder.Entity<GtFbptcm>(entity =>
            {
                entity.HasKey(e => new { e.BusinessKey, e.FbdocumentKey, e.CommentCode });

                entity.ToTable("GT_FBPTCM");

                entity.Property(e => e.FbdocumentKey).HasColumnName("FBDocumentKey");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FormId)
                    .IsRequired()
                    .HasColumnName("FormID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<GtFbptdt>(entity =>
            {
                entity.HasKey(e => new { e.BusinessKey, e.FinancialYear, e.DocumentId, e.DocumentNumber });

                entity.ToTable("GT_FBPTDT");

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DoctorName).HasMaxLength(250);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.EmailId)
                    .HasColumnName("EmailID")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FbdocumentKey).HasColumnName("FBDocumentKey");

                entity.Property(e => e.FeedBackType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FormId)
                    .IsRequired()
                    .HasColumnName("FormID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PatientName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.PatientType)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RUhid).HasColumnName("R_UHID");

                entity.Property(e => e.ReportedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<GtFbptqe>(entity =>
            {
                entity.HasKey(e => new { e.BusinessKey, e.FbdocumentKey });

                entity.ToTable("GT_FBPTQE");

                entity.Property(e => e.FbdocumentKey).HasColumnName("FBDocumentKey");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.CreatedOn).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedTerminal)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FormId).HasColumnName("FormID");

                entity.Property(e => e.QuestionnaireId).HasColumnName("QuestionnaireID");
            });

            modelBuilder.Entity<GtFbqegr>(entity =>
            {
                entity.HasKey(e => new { e.FeedBackType, e.QuestionnaireGroupId, e.Langauge });

                entity.ToTable("GT_FBQEGR");

                entity.Property(e => e.FeedBackType)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.QuestionnaireGroupId).HasColumnName("QuestionnaireGroupID");

                entity.Property(e => e.Langauge)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((1))");

                entity.Property(e => e.FormId)
                    .IsRequired()
                    .HasColumnName("FormID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.QuestionnaireGroupDesc).IsRequired();

                entity.Property(e => e.WeightedAverage).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<GtFbqems>(entity =>
            {
                entity.HasKey(e => new { e.FeedBackType, e.QuestionnaireId, e.Langauge });

                entity.ToTable("GT_FBQEMS");

                entity.Property(e => e.FeedBackType)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.QuestionnaireId).HasColumnName("QuestionnaireID");

                entity.Property(e => e.Langauge)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FormId)
                    .IsRequired()
                    .HasColumnName("FormID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedTerminal).HasMaxLength(50);

                entity.Property(e => e.Qtype)
                    .IsRequired()
                    .HasColumnName("QType")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.QuestionnaireDesc).IsRequired();

                entity.Property(e => e.QuestionnaireGroupId).HasColumnName("QuestionnaireGroupID");
            });

            modelBuilder.Entity<GtFbqetg>(entity =>
            {
                entity.HasKey(e => new { e.BusinessKey, e.FinancialYear, e.FeedBackType, e.MonthId });

                entity.ToTable("GT_FBQETG");

                entity.Property(e => e.FeedBackType)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.MonthId).HasColumnName("MonthID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedTerminal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FormId)
                    .IsRequired()
                    .HasColumnName("FormID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });
        }
    }
}
