using eSyaFeedback.DL.Entities;
using eSyaFeedback.DO;
using eSyaFeedback.IF;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace eSyaFeedback.DL.Repository
{
    public class FeedbackQuestionnaireRepository: IFeedbackQuestionnaireRepository
    {
        private eSyaEnterprise _context { get; set; }
        public FeedbackQuestionnaireRepository(eSyaEnterprise context)
        {
            _context = context;
        }
        public async Task<List<DO_QuestionnaireGroup>> GetQuestionnaireGroup(string feedBackType, string langauge)
        {
            try
            {

                var q_grp = await _context.GtFbqegr
                            .Where(x => x.FeedBackType == feedBackType && x.Langauge == langauge
                                                && x.ActiveStatus)
                            .Select(x => new DO_QuestionnaireGroup
                            {
                                QuestionnaireGroupID = x.QuestionnaireGroupId,
                                QuestionnaireGroupDesc = x.QuestionnaireGroupDesc,
                            }).ToListAsync();
                return q_grp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_QuestionnaireMaster>> GetQuestionnaireMaster(string feedBackType, string langauge)
        {
            try
            {
                var q_grp = await _context.GtFbqems
                    .Where(x => x.FeedBackType == feedBackType && x.Langauge == langauge
                                                && x.ActiveStatus)
                    .Select(x => new DO_QuestionnaireMaster
                    {
                        QuestionnaireGroupID = x.QuestionnaireGroupId,
                        QuestionnaireID = x.QuestionnaireId,
                        QuestionnaireDesc = x.QuestionnaireDesc,
                        QType = x.Qtype,
                        DisplayOrder = x.DisplayOrder,
                    }).OrderBy(o => o.DisplayOrder).ToListAsync();
                return q_grp;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertIntoQuestionnaireGroup(DO_QuestionnaireGroup obj)
        {

            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    int display_maxval = _context.GtFbqegr.Select(x=>x.DisplayOrder).DefaultIfEmpty().Max();
                    display_maxval = display_maxval + 1;

                    int qgroupId_maxval = _context.GtFbqegr.Select(x => x.QuestionnaireGroupId).DefaultIfEmpty().Max();
                    qgroupId_maxval = qgroupId_maxval + 1;

                    GtFbqegr qp = new GtFbqegr();
                    qp.FeedBackType = obj.FeedBackType;
                    qp.QuestionnaireGroupId = qgroupId_maxval;
                    qp.Langauge = obj.Langauge;
                    qp.QuestionnaireGroupDesc = obj.QuestionnaireGroupDesc;
                    qp.WeightedAverage = obj.WeightedAverage;
                    qp.DisplayOrder = display_maxval;
                    qp.ActiveStatus = true;
                    qp.FormId = obj.FormId;
                    qp.CreatedBy = obj.UserID;
                    qp.CreatedOn = System.DateTime.Now;
                    qp.CreatedTerminal = obj.TerminalID;
                    _context.GtFbqegr.Add(qp);
                    await _context.SaveChangesAsync();
                    dbContextTransaction.Commit();
                    return new DO_ReturnParameter() { Status = true, Message = "Submitted Successfully." };

                }

                catch (DbUpdateException ex)
                {
                    dbContextTransaction.Rollback();
                    throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                }
            }
        }

        public async Task<DO_ReturnParameter> InsertIntoMaster(DO_QuestionnaireMaster obj)
        {

            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    int display_maxval = _context.GtFbqems.Select(x => x.DisplayOrder).DefaultIfEmpty().Max();
                    display_maxval = display_maxval + 1;

                    int qId_maxval = _context.GtFbqems.Select(x => x.QuestionnaireId).DefaultIfEmpty().Max();
                    qId_maxval = qId_maxval + 1;

                    GtFbqems fm = new GtFbqems();
                    fm.FeedBackType = obj.FeedBackType;
                    fm.QuestionnaireId = qId_maxval;
                    fm.Langauge = obj.Langauge;
                    fm.QuestionnaireGroupId = 1;
                    fm.QuestionnaireDesc = obj.QuestionnaireDesc;
                    fm.Qtype = obj.QType;
                    fm.DisplayOrder = display_maxval;
                    fm.ActiveStatus = true;
                    fm.FormId = obj.FormId;
                    fm.CreatedBy = obj.UserID;
                    fm.CreatedOn = System.DateTime.Now;
                    fm.CreatedTerminal = obj.TerminalID;
                    _context.GtFbqems.Add(fm);
                    await _context.SaveChangesAsync();
                    dbContextTransaction.Commit();
                    return new DO_ReturnParameter() { Status = true, Message = "Submitted Successfully." };

                }
               
                catch (DbUpdateException ex)
                {
                    dbContextTransaction.Rollback();
                    throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                }
            }
        }
    }
}
