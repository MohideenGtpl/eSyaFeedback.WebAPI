using eSyaFeedback.DL.Entities;
using eSyaFeedback.DO;
using eSyaFeedback.DO.StaticVariables;
using eSyaFeedback.IF;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace eSyaFeedback.DL.Repository
{
    public class PatientFeedbackTransactionRepository: IPatientFeedbackTransactionRepository
    {
        private eSyaEnterprise _context { get; set; }
        public PatientFeedbackTransactionRepository(eSyaEnterprise context)
        {
            _context = context;
        }
        public async Task<DO_ReturnParameter> InsertIntoPatientFeedbackQuestionnaire(DO_PatientFeedback obj)
        {

            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {

                    GtFbptdt pt = new GtFbptdt();
                    pt.BusinessKey = obj.BusinessKey;
                    pt.FinancialYear = (short)System.DateTime.Now.Year;
                    pt.DocumentId = 1;

                    var dc_FB = await _context.GtEcdcbn
                         .Where(w => w.BusinessKey == obj.BusinessKey && w.FinancialYear == obj.FinancialYear
                             && w.DocumentId == DocumentIdValues.FB_DocumentId).FirstOrDefaultAsync();
                        dc_FB.CurrentDocNumber = dc_FB.CurrentDocNumber + 1;
                        obj.FBDocumentKey = long.Parse(obj.FinancialYear.ToString().Substring(2, 2) + obj.BusinessKey.ToString().PadLeft(2, '0') + dc_FB.CurrentDocNumber.ToString());
                    pt.DocumentNumber = (int)dc_FB.CurrentDocNumber;
                    pt.FbdocumentKey = obj.FBDocumentKey;
                    pt.DocumentDate = System.DateTime.Now;
                    pt.FeedBackType = obj.FeedBackType;
                    pt.FloorId = obj.FloorId;
                    pt.RUhid = obj.UHID;
                    pt.FirstName = obj.FirstName;
                    pt.MiddleName = obj.MiddleName;
                    pt.LastName = obj.LastName;
                    pt.Isdcode = obj.IsdCode;
                    pt.MobileNumber = obj.MobileNumber;
                    pt.EmailId= obj.EmailId;
                    pt.DoctorId = obj.DoctorId;
                    pt.DoctorName = obj.DoctorName;
                    pt.SpecialtyId = obj.SpecialtyId;
                    pt.PatientType = obj.PatientType;
                    pt.ReportedDate = System.DateTime.Now;//obj.ReportedDate;
                    pt.OverAllRating = obj.OverAllRating;
                    pt.CommentOnServices = obj.CommentOnServices;
                    pt.ActiveStatus = true;
                    pt.FormId = obj.FormId;
                    pt.CreatedBy = obj.UserID;
                    pt.CreatedOn = System.DateTime.Now;
                    pt.CreatedTerminal = obj.TerminalID;

                    _context.GtFbptdt.Add(pt);

                    
                    if (obj.l_QuestionnaireMaster != null)
                    {

                       foreach (var q in obj.l_QuestionnaireMaster.Where(w => w.QuestionnaireValue > 0 && w.QuestionnaireValue!=null))
                       {
                        GtFbptqe p_q = new GtFbptqe();
                        p_q.BusinessKey = pt.BusinessKey;
                        p_q.FbdocumentKey = pt.FbdocumentKey;
                        p_q.QuestionnaireId = q.QuestionnaireID;
                        p_q.QuestionnaireValue = q.QuestionnaireValue;
                        p_q.Comments = q.Comments;
                        p_q.ActiveStatus = true;
                        p_q.FormId = obj.FormId;
                        p_q.CreatedBy = obj.UserID;
                        p_q.CreatedOn = System.DateTime.Now;
                        p_q.CreatedTerminal = obj.TerminalID;

                        _context.GtFbptqe.Add(p_q);
                       }

                    }

                    if (obj.l_CommentCode != null)
                    {
                        foreach (var c in obj.l_CommentCode)
                        {
                            GtFbptcm p_c = new GtFbptcm();
                            p_c.BusinessKey = pt.BusinessKey;
                            p_c.FbdocumentKey = pt.FbdocumentKey;
                            p_c.CommentCode = c;
                            p_c.ActiveStatus = true;
                            p_c.FormId = obj.FormId;
                            p_c.CreatedBy = obj.UserID;
                            p_c.CreatedOn = System.DateTime.Now;
                            p_c.CreatedTerminal = obj.TerminalID;

                            _context.GtFbptcm.Add(p_c);
                        }
                    }


                    await _context.SaveChangesAsync();
                    dbContextTransaction.Commit();
                    return new DO_ReturnParameter() { Status = true, Message = "Submitted Successfully." };

                }

                catch (DbUpdateException ex)
                {
                    dbContextTransaction.Rollback();
                    throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                }
            }
        }

        public async Task<List<DO_Floor>> GetFloorsbyCodeType(int codetype)
        {
            
            try
            {
                using (var db = _context.Database.BeginTransaction())
                {
                    var floors = await _context.GtEcapcd.Where(w => w.CodeType == codetype && w.ActiveStatus==true)
                    
                                    .Select(x => new DO_Floor
                                     {
                                         FloorId = x.ApplicationCode,
                                         FloorName = x.CodeDesc
                                     }).ToListAsync();
                    return  floors;
                }
            }

            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_Specialty>> GetSpecialtiesByBusinessKey(int businesskey)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                       var fa =await db.GtEsspcd.Where(w => w.ActiveStatus == true)
                        .Join(db.GtEsdosp.Where(x => x.BusinessKey == businesskey),
                        a => a.SpecialtyId,
                        f => f.SpecialtyId,
                        (a, f) => new { a, f})
                        .Select(r => new DO_Specialty
                        {
                            SpecialtyId = r.a.SpecialtyId,
                            SpecialtyName = r.a.SpecialtyDesc
                            
                        }).ToListAsync();
                    var distinctList = fa.GroupBy(e => e.SpecialtyId).Select(g => g.First());
                    return  distinctList.ToList();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_Doctor>> GetDoctorsByBusinessKey(int businesskey)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var fa =await db.GtEsdocd.Where(w => w.ActiveStatus == true)
                     .Join(db.GtEsdobl.Where(x=>x.BusinessKey==businesskey),
                     a => a.DoctorId,
                     f => f.DoctorId,
                     (a, f) => new { a, f })
                     .Select(r => new DO_Doctor
                     {
                         DoctorId = r.a.DoctorId,
                         DoctorName = r.a.DoctorName

                     }).ToListAsync();
                    var distinctList = fa.GroupBy(e => e.DoctorId).Select(g => g.First());
                    return distinctList.ToList();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}
